#!/usr/bin/env python3
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0 OR MIT

# This scripts consumes function pointer restrictions per-crate and produces a
# single combined restrictions file in the format CBMC expects.

# The script expects a single directory argument containing JSON files ending 
# in 'fn_ptr_restrictions_link'. It writes out to standard out.

from collections import defaultdict
import json
import os
import sys

def format_for_cbmc(all_call_sites, all_possible_methods):
    # For each site, list all restrictions. If no sites found, emit the empty
    # list as the restriction set, which is sound because CBMC asserts(false)
    # on not finding a match.
    output = {}
    for site in all_call_sites:
        # This is precisely the naming scheme CBMC expects:
        # http://cprover.diffblue.com/md__home_travis_build_diffblue_cbmc_doc_architectural_restrict-function-pointer.html
        name = "{}.function_pointer_call.1".format(site["function_location"])
        trait_def = site["trait_method"]
        key = (trait_def["trait_name"], trait_def["vtable_idx"])
        if key in all_possible_methods:
            output[name] = all_possible_methods[key]
        else: 
            output[name] = []

    return output

def combine_from_json(artifact_dir):
    all_call_sites = []
    all_possible_methods = defaultdict(list)

    # Read in JSON data and convert to nested dictionaries. Data needs to be 
    # keyed by tuples of (trait, method index). 
    for f in os.listdir(artifact_dir):
        if f.endswith(".fn_ptr_restrictions_link"):
            with open(os.path.join(artifact_dir, f)) as json_file:
                crate_data = json.load(json_file) 
                all_call_sites += crate_data["call_sites"]

                for possibility in crate_data["possible_methods"]:
                    trait_def = possibility["trait_def"]
                    key = (trait_def["trait_name"], trait_def["vtable_idx"])
                    methods = possibility["methods"]
                    all_possible_methods[key] += methods

    return format_for_cbmc(all_call_sites, all_possible_methods)

def main():
    if len(sys.argv) != 2:
        print("Error: wrong number of arguments, expected single path")
        return 1

    artifact_dir = sys.argv[1]
    if not os.path.isdir(artifact_dir):
        print("Error: artifact directory not found: {}", artifact_dir)
        return 1

    combined_restrictions = combine_from_json(artifact_dir)    

    # Write to standard out
    print(json.dumps(combined_restrictions, indent=2))

if __name__ == "__main__":
    sys.exit(main())